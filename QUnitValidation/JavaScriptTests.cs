using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using NUnit.Framework;
using WatiN.Core;

[assembly: RequiresSTA]

namespace QUnitValidation
{
    [TestFixture]
    public class JavaScriptTests
    {
        private IE _ie;

        [TestFixtureSetUp]
        public void TestFixtureSetup()
        {
            _ie = new IE();
        }

        [Test]
        public void QUnit()
        {
            //test.ShouldPass();
            var x = RunQUnitTests();
        }

        [TestFixtureTearDown]
        public void TestFixtureTearDown()
        {
            _ie.Close();
        }

        public IEnumerable<TestCaseData> RunQUnitTests()
        {
            var x = GetQUnitTestResults("test.html").Select(t => new TestCaseData(t));
            return x;
        }
  
  
        public IEnumerable<QUnitTest> GetQUnitTestResults(string testPage)
        {
            //var directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var directory = @"C:\Users\Rob\Documents\Visual Studio 2010\Projects\QUnitValidation\QUnitValidation\bin\Debug";
            var fileName = string.IsNullOrEmpty(directory) ? testPage : Path.Combine(directory, testPage);
            _ie.GoTo(fileName);
            _ie.WaitForComplete(5);
  
            return GrabTestResultsFromWebPage(testPage);
        }
  
        public IEnumerable<QUnitTest> GrabTestResultsFromWebPage(string testPage)
        {
            // BEWARE: This logic is tightly coupled to the structure of the HTML generated by the QUnit test runner
            // Also, this could probably be greatly simplified with a couple well-crafted XPath expressions
            var testOl = _ie.Elements.Filter(Find.ById("tests"))[0];
            if (testOl == null) yield break;
            var documentRoot = XDocument.Load(new StringReader(MakeXHtml(testOl.OuterHtml))).Root;
            if (documentRoot == null) yield break;
  
            foreach (var listItem in documentRoot.Elements())
            {
                var testName = listItem.Elements().First( x => x.Name.Is("strong")).Value;
                var resultClass = listItem.Attributes().First(x => x.Name.Is("class")).Value;
                var failedAssert = String.Empty;
                if (resultClass == "fail")
                {
                    var specificAssertFailureListItem = listItem.Elements()
                        .First(x => x.Name.Is("ol")).Elements()
                        .First(x => x.Name.Is("li") && x.Attributes().First(a=> a.Name.Is("class")).Value == "fail");
                    if (specificAssertFailureListItem != null)
                    {
                        failedAssert = specificAssertFailureListItem.Value;
                    }
                }
 
                yield return new QUnitTest
                    {
                        FileName = testPage,
                        TestName = RemoveAssertCounts(testName),
                        Result = resultClass, Message = failedAssert
                    };
            }
  
        }
  
        private static string MakeXHtml(string html)
        {
            return html.Replace("class=pass", "class=\"pass\"")
                .Replace("class=fail", "class=\"fail\"")
                .Replace("id=tests", "id=\"tests\"");
        }
  
  
        private static string RemoveAssertCounts(string fullTagText)
        {
            if (fullTagText == null) return String.Empty;
            int parenPosition = fullTagText.IndexOf('(');
            if (parenPosition > 0)
            {
                return fullTagText.Substring(0, parenPosition - 1);
            }
            return fullTagText;
        }
    }
  
    public class QUnitTest
    {
        public string FileName { get; set; }
        public string TestName { get; set; }
        public string Result { get; set; }
        public string Message { get; set; }
  
        public override string ToString()
        {
            return string.Format("[{0}] {1}", FileName, TestName);
        }
    }
  
    public static class QUnitTestHelpers
    {
        public static void ShouldPass(this QUnitTest theTest)
        {
            Assert.That(theTest.Result.Split(' '), Has.Member("pass"), theTest.Message);
        }
  
        public static bool Is(this XName xname, string name)
        {
            return xname.ToString().Equals(name, StringComparison.OrdinalIgnoreCase);
        }
    }
}